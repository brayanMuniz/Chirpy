// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps(id, user_id, created_at, updated_at, body)
VALUES (
	$1, $2, NOW(), NOW(), $3
)
RETURNING id, user_id, created_at, updated_at, body
`

type CreateChirpParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Body   string
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.ID, arg.UserID, arg.Body)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
	)
	return i, err
}

const deleteAllChirps = `-- name: DeleteAllChirps :exec
DELETE FROM chirps
`

func (q *Queries) DeleteAllChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllChirps)
	return err
}

const deleteChirp = `-- name: DeleteChirp :exec
DELETE FROM chirps
WHERE id = $1
`

func (q *Queries) DeleteChirp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, id)
	return err
}

const getChirp = `-- name: GetChirp :one
SELECT id, user_id, created_at, updated_at, body FROM chirps 
WHERE id = $1
`

func (q *Queries) GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, user_id, created_at, updated_at, body 
FROM chirps
WHERE ($1 = '00000000-0000-0000-0000-000000000000'::UUID OR user_id = $1)
ORDER BY 
    CASE 
        WHEN $2 = 'desc' THEN created_at 
        ELSE NULL
    END DESC,
    CASE 
        WHEN $2 = 'asc' THEN created_at 
        ELSE NULL
    END ASC
`

type GetChirpsParams struct {
	Column1 interface{}
	Column2 interface{}
}

func (q *Queries) GetChirps(ctx context.Context, arg GetChirpsParams) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
